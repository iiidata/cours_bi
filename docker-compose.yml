version: '3.9'

version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.2.3}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@db/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./airflow_logs:/opt/airflow/logs
    - ${referentials_files:-./../referentials/}:/referentials
    - ${DOCKER_SOCK:-/var/run/docker.sock:/var/run/docker.sock}
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    db:
      condition: service_healthy
  networks:
    - host

x-logging: &default-logging
  options:
    max-size: "100m"
    max-file: "5"
  driver: json-file

services:
  docker-proxy:
    image: bobrik/socat
    container_name: proxy-cours
    restart: always
    command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
    ports:
      - "2376:2375"
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock:/var/run/docker.sock}
    networks:
      - host

  db:
    container_name: postgresdb-cours
    image: postgres:13.4
    restart: always
    ports:
      - "5432:5432"
    #command: postgres -c 'max_connections=200'
    environment:
      POSTGRES_DB: cours
      POSTGRES_USER: ${DATABASE_USER:-user}
      POSTGRES_PASSWORD: ${_POSTGRES_PASSWORD:-pass}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "cours"]
      interval: 5s
      retries: 5
    volumes:
      - ./postgresdb/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./postgres_data:/var/lib
    networks:
      - host

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-cours
    restart: always
    ports:
      - "5454:5454"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${_PGADMIN_DEFAULT_EMAIL:-info@gmail.fr}
      PGADMIN_DEFAULT_PASSWORD: ${_PGADMIN_DEFAULT_PASSWORDE:-pass}
      PGADMIN_LISTEN_PORT: 5454
    networks:
      - host
    depends_on:
      - db
    links:
      - "db:pgsql-server"

  redis:
    image: redis:latest
    container_name: redis-cours
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    depends_on:
      - db
    networks:
      - host

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver-cours
    command: webserver
    ports:
      - 8585:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler-cours
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: airflow-worker-cours
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: airflow-triggerer-cours
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow-init-cours
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - .:/sources

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli-cours
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    container_name: airflow-flower-cours
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # dbt:
  #   container_name: dbt-cours
  #   build:
  #     context: DBT/
  #     dockerfile: Dockerfile
  #     args:
  #       - CRYPTOGRAPHY_KEY=$CRYPTOGRAPHY_KEY
  #       - ENV=$ENV
  #   volumes:
  #     - ${referentials_files}:/referentials
  #   networks:
  #     - host

  airbyte-init:
    container_name: airbyte-init-cours
    image: airbyte/init:${VERSION}
    logging: *default-logging
    command: /bin/sh -c "./scripts/create_mount_directories.sh /local_parent ${HACK_LOCAL_ROOT_PARENT} ${LOCAL_ROOT}"
    environment:
      - LOCAL_ROOT=${LOCAL_ROOT}
      - HACK_LOCAL_ROOT_PARENT=${HACK_LOCAL_ROOT_PARENT}
    volumes:
      - ${HACK_LOCAL_ROOT_PARENT}:/local_parent

  airbyte-scheduler:
    container_name: airbyte-scheduler-cours
    image: airbyte/scheduler:${VERSION}
    logging: *default-logging
    restart: always
    environment:
      - WEBAPP_URL=${WEBAPP_URL}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${_POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - RUN_DATABASE_MIGRATION_ON_STARTUP=${RUN_DATABASE_MIGRATION_ON_STARTUP}
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - WORKSPACE_DOCKER_MOUNT=${WORKSPACE_DOCKER_MOUNT}
      - LOCAL_ROOT=${LOCAL_ROOT}
      - LOCAL_DOCKER_MOUNT=${LOCAL_DOCKER_MOUNT}
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - TEMPORAL_HOST=${TEMPORAL_HOST}
      - WORKER_ENVIRONMENT=${WORKER_ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
      - SUBMITTER_NUM_THREADS=${SUBMITTER_NUM_THREADS}
      - RESOURCE_CPU_REQUEST=${RESOURCE_CPU_REQUEST}
      - RESOURCE_CPU_LIMIT=${RESOURCE_CPU_LIMIT}
      - RESOURCE_MEMORY_REQUEST=${RESOURCE_MEMORY_REQUEST}
      - RESOURCE_MEMORY_LIMIT=${RESOURCE_MEMORY_LIMIT}
      - MAX_SYNC_JOB_ATTEMPTS=${MAX_SYNC_JOB_ATTEMPTS}
      - MAX_SYNC_TIMEOUT_DAYS=${MAX_SYNC_TIMEOUT_DAYS}
      - INTERNAL_API_HOST=${INTERNAL_API_HOST}
      - SECRET_PERSISTENCE=${SECRET_PERSISTENCE}
    volumes:
      - workspace:${WORKSPACE_ROOT}
      - ${LOCAL_ROOT}:${LOCAL_ROOT}
      - data:${CONFIG_ROOT}
    networks:
      - host

  airbyte-worker:
    container_name: airbyte-worker-cours
    image: airbyte/worker:${VERSION}
    logging: *default-logging
    restart: always
    environment:
      - WEBAPP_URL=${WEBAPP_URL}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${_POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - RUN_DATABASE_MIGRATION_ON_STARTUP=${RUN_DATABASE_MIGRATION_ON_STARTUP}
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - WORKSPACE_DOCKER_MOUNT=${WORKSPACE_DOCKER_MOUNT}
      - LOCAL_ROOT=${LOCAL_ROOT}
      - LOCAL_DOCKER_MOUNT=${LOCAL_DOCKER_MOUNT}
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - TEMPORAL_HOST=${TEMPORAL_HOST}
      - WORKER_ENVIRONMENT=${WORKER_ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
      - SUBMITTER_NUM_THREADS=${SUBMITTER_NUM_THREADS}
      - RESOURCE_CPU_REQUEST=${RESOURCE_CPU_REQUEST}
      - RESOURCE_CPU_LIMIT=${RESOURCE_CPU_LIMIT}
      - RESOURCE_MEMORY_REQUEST=${RESOURCE_MEMORY_REQUEST}
      - RESOURCE_MEMORY_LIMIT=${RESOURCE_MEMORY_LIMIT}
      - MAX_SYNC_JOB_ATTEMPTS=${MAX_SYNC_JOB_ATTEMPTS}
      - MAX_SYNC_TIMEOUT_DAYS=${MAX_SYNC_TIMEOUT_DAYS}
      - INTERNAL_API_HOST=${INTERNAL_API_HOST}
      - SECRET_PERSISTENCE=${SECRET_PERSISTENCE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - workspace:${WORKSPACE_ROOT}
      - ${LOCAL_ROOT}:${LOCAL_ROOT}
    networks:
      - host

  airbyte-server:
    container_name: airbyte-server-cours
    image: airbyte/server:${VERSION}
    logging: *default-logging
    restart: always
    environment:
      - WEBAPP_URL=${WEBAPP_URL}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${_POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - CONFIG_DATABASE_USER=${CONFIG_DATABASE_USER:-}
      - CONFIG_DATABASE_PASSWORD=${CONFIG_DATABASE_PASSWORD:-}
      - CONFIG_DATABASE_URL=${CONFIG_DATABASE_URL:-}
      - RUN_DATABASE_MIGRATION_ON_STARTUP=${RUN_DATABASE_MIGRATION_ON_STARTUP}
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - TEMPORAL_HOST=${TEMPORAL_HOST}
      - WORKER_ENVIRONMENT=${WORKER_ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
      - RESOURCE_CPU_REQUEST=${RESOURCE_CPU_REQUEST}
      - RESOURCE_CPU_LIMIT=${RESOURCE_CPU_LIMIT}
      - RESOURCE_MEMORY_REQUEST=${RESOURCE_MEMORY_REQUEST}
      - RESOURCE_MEMORY_LIMIT=${RESOURCE_MEMORY_LIMIT}
      - SECRET_PERSISTENCE=${SECRET_PERSISTENCE}
    ports:
      - 8001:8001
    volumes:
      - workspace:${WORKSPACE_ROOT}
      - data:${CONFIG_ROOT}
      - ${LOCAL_ROOT}:${LOCAL_ROOT}
    networks:
      - host

  airbyte-webapp:
    container_name: airbyte-webapp-cours
    image: airbyte/webapp:${VERSION}
    logging: *default-logging
    restart: always
    ports:
      - 8000:80
    environment:
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - AIRBYTE_VERSION=${VERSION}
      - API_URL=${API_URL:-}
      - IS_DEMO=${IS_DEMO:-}
      - FULLSTORY=${FULLSTORY:-}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - INTERNAL_API_HOST=${INTERNAL_API_HOST}
      - OPENREPLAY=${OPENREPLAY:-}
      - PAPERCUPS_STORYTIME=${PAPERCUPS_STORYTIME:-}
    networks:
      - host

  airbyte-temporal:
    container_name: airbyte-temporal-cours
    image: temporalio/auto-setup:1.7.0
    logging: *default-logging
    restart: always
    ports:
      - 7233:7233
    environment:
      - DB=postgresql
      - DB_PORT=${DATABASE_PORT}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PWD=${_POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=${DATABASE_HOST}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - host

networks:
  host:

volumes:
  airbyte_db:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
  dbt_data:
    driver: local
  workspace:
    name: ${WORKSPACE_DOCKER_MOUNT}
  # the data volume is only needed for backward compatibility; when users upgrade
  # from an old Airbyte version that relies on file-based configs, the server needs
  # to read this volume to copy their configs to the database
  data:
    name: ${DATA_DOCKER_MOUNT}
